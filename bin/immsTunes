#! /usr/bin/env ruby
require 'rubygems' rescue nil
require 'socket'
require 'pathname'
require 'logger'
require 'thread'
require 'appscript'
include Appscript

HOME = Pathname.new(ENV['HOME'])
# Interval for polling iTunes (seconds)
PollInterval = 1
# If we are within this many seconds from the end of the track, the track is
# considered not skipped. Should be at least bigger than PollInterval
FinThreshold = 3

# Logging
$log = Logger.new STDOUT
$log.datetime_format = "%Y-%m-%d %H:%M:%S "
$log.level = Logger::INFO

# Option parsing
$log.level = Logger::WARN if ARGV.include?('-q')
$log.level = Logger::DEBUG if ARGV.include?('-v')
DEBUG = ARGV.include?('-d')
if ARGV.include?('-h')
  puts "usage: #{$0} [-q|-v|-d]\n-q\tquiet\n-v\tverbose\n-d\tdebug"
  exit
end


# iTunes isn't a valid class name and ITunes is tacky.
class Tunes < DelegateClass(Appscript::Application)
  # The music library
  attr :library

  # The playlist we manage, e.g. Party Shuffle
  attr :playlist

  def initialize
    @system = app('System Events')
    wait

    @app = app('iTunes')
    super(@app)

    @playlist = @app.playlists[its.special_kind.eq(:Party_Shuffle)].first.get
    @library = @app.library_playlists.first.get

    fixed_indexing.set true
  end
  
  def enqueue(track)
    duplicate track, :to => playlist
  end
  
  # Get the index of this track in the library
  def index(track)
    t = tracks[its.persistent_ID.eq(track.persistent_ID.get)].get.first
    if t
      t.index.get
    else
      nil
    end
  end

  # Is iTunes running?
  def running
    @system.processes.name.get.include? 'iTunes'
  end

  # Wait for iTunes to be running
  def wait
    until running
      sleep 5
    end
  end

  # How many tracks in the library?
  def track_count
    @library.count(:each => :track)
  end
end

class IMMS
  def initialize
    $log.info 'Connecting to iTunes'
    @tunes = Tunes.new

    # Try to connect to the UNIX socket, and failing that start immsd and try
    # again.
    $log.info 'Connecting to immsd'
    begin
      @sock = UNIXSocket.open(HOME + '.imms' + 'socket')
    rescue Errno::ECONNREFUSED
      fork do
        exec 'nice -n 5 immsd'
      end
      sleep 1
      retry
    end

    # add verbose/debug output on @sock.puts
    class << @sock
      def puts(str)
        $log.debug "> #{str.strip}" if DEBUG or not str =~ /^Playlist(Item)? /
        super
      end
      def gets
        str = super
        $log.debug "< #{str.strip}" if DEBUG or not str =~ /^GetPlaylistItem /
        str
      end
    end

    @mutex = Mutex.new

    @sock.puts 'Version'
    version = @sock.gets.strip
    unless version == 'Version 2.1'
      $log.warn "I'm not programmed for #{version}. Strange things may happen!" 
    end

    @sock.puts 'IMMS'
    @sock.puts 'Setup 0'
    playlist_changed
  end

  def playlist_changed
    @sock.puts "PlaylistChanged #{@tunes.track_count}"
  end

  # Dispatch incoming server commands
  def dispatch
    until @sock.eof do
      line = @sock.gets.strip
      
      @tunes.wait

      @mutex.synchronize {
        cmd = line.split.first
        case cmd
        when 'ResetSelection'
          if @next
            @tunes.playlist.delete @next
          end

        when 'TryAgain'
          @sock.puts 'SelectNext'

        when 'EnqueueNext'
          pos = line.split.last.to_i+1
          t = @tunes.tracks[pos]
          if loc(t) != :missing_value and t.enabled.get and t.shufflable.get
            @next = @tunes.enqueue(t).get
            $log.debug "upcoming: #{t.name.get}"
            @waiting_for_next = false
          else
            @sock.puts 'SelectNext'
          end

        when 'PlaylistChanged'
          $log.warn 'immsd detected playlist change'
          playlist_changed

        when 'GetPlaylistItem'
          pos = line.split.last.to_i+1
          t = @tunes.tracks[pos]
          path = loc(t)
          @sock.puts "PlaylistItem #{pos-1} #{path}"

        when 'GetEntirePlaylist'
          $log.info 'Sending entire playlist'
          @tunes.tracks.get.each do |track|
            path = loc(track)
            pos = track.index.get
            @sock.puts "Playlist #{pos-1} #{path}"
          end
          @sock.puts "PlaylistEnd"
          $log.info 'Done sending playlist'

        else
          $log.error "Unknown Command '#{line}'"

        end
      }
    end
  end

  def endsong(finished, jumping, bad=false)
    $log.debug "endsong finished=#{finished.inspect} jumping=#{jumping.inspect} bad=#{bad.inspect}"
    @sock.puts "EndSong #{finished ? 1 : 0} #{jumping ? 1 : 0} #{bad ? 1 : 0}"
  end

  # Observe iTunes and send stuff to the server
  def control
    current_track = nil
    plays = 0
    fin = false
    # If we happen to play a song not in the library playlist, we'll not tell
    # IMMS about it. (off the record)
    otr = false
    jumping = false
    loop do
      @tunes.wait

      @mutex.synchronize {
        # Observe listening behavior

        playing = (@tunes.player_state.get == :playing)

        if playing
          t = @tunes.current_track.get rescue next
          controlling = @tunes.current_playlist.get == @tunes.playlist.get
          if not @tunes.mute.get
            # advanced?
            if t != current_track
              if plays and current_track
                fin = (plays < current_track.played_count.get)
              end
              endsong(fin, jumping, false) if (current_track and not otr)
              i = @tunes.index(t)
              otr = i.nil?
              @sock.puts "StartSong #{i-1} #{loc(t)}" unless otr

              plays = t.played_count.get
              current_track = t
              @next == nil if t == @next

            else # same track we've been playing
              # are we jumping to the next track?
              if controlling # for now, we don't have the sophistication to detect jumps unless we're controlling
                i = t.index.get + 1
                jumping = false
                if i <= @tunes.playlist.count(:each => :track) and @next
                  # we're jumping if the next track isn't the one we queued up
                  jumping = (@tunes.playlist.tracks[t.index.get + 1].get != @next)
                end
              end

            end
          end

          # Control playlist
          if controlling
            l = @tunes.playlist.count(:each => :track)
            p = t.index.get
            if p == l and not @waiting_for_next
              @sock.puts "SelectNext"
              @waiting_for_next = true
            end
          end
        end
      }

      sleep PollInterval
    end
  end

  # Get the imms identifier: location (filename) for file tracks, name for other kinds of tracks
  def loc(track)
    begin
      track.location.get
    rescue Appscript::CommandError
      track.name.get
    end
  end
end

imms = IMMS.new
Thread.new do
  begin
    imms.dispatch
    $log.fatal "immsd connection lost"
    exit
  rescue
    $log.error $!
    retry
  end
end

begin
  imms.control
rescue
  $log.error $!
  retry
end

# This file is distributed under the Ruby License (http://www.ruby-lang.org/en/LICENSE.txt)
