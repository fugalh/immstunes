#! /usr/bin/env ruby
require 'rubygems' rescue nil
require 'socket'
require 'pathname'
require 'logger'
require 'thread'
require 'appscript'
require 'yaml'
include Appscript

HOME = Pathname.new(ENV['HOME'])
# Interval for polling iTunes (seconds)
PollInterval = 1
# If we are within this many seconds from the end of the track, the track is
# considered not skipped. Should be at least bigger than PollInterval
FinThreshold = 3
# Idle threshold - we omit reporting music played while idle to IMMS.
IdleThreshold = 10 * 60

# Logging
$log = Logger.new STDOUT
$log.datetime_format = "%Y-%m-%d %H:%M:%S "
$log.level = Logger::INFO

# Option parsing
case ARGV.join
when /h/
  puts <<EOF
usage: #{$0} [-q|-v|-d]
  -q    quiet
  -v    verbose
  -d    debug
EOF
  exit
when /D/
  $debug = true
when /d/
  $verbose = true
  $log.level = Logger::DEBUG
when /v/
  $verbose = true
when /q/
  $log.level = Logger::WARN
end


# iTunes isn't a valid class name and ITunes is tacky.
class Tunes < DelegateClass(Appscript::Application)

  # A hash of persistent_ID to (location or persistent_ID)
  class Cache < DelegateClass(Hash)
    CacheFile = HOME + '.imms' + 'immsTunes.cache'

    def initialize(iTunes)
      @tunes = iTunes
      @hsh = {}
      super @hsh
      read
    end

    # Read the cache from ~/.imms/immsTunes.cache
    def read
      if CacheFile.exist?
        $log.info "Reading cache"
        h = (YAML.load(CacheFile.read) rescue nil)
        h = {} unless Hash === h
        self.merge h
      end
      self
    end

    # Write the cache
    def write
      $log.info "Writing cache"
      CacheFile.open('w') {|f| f.puts @hsh.to_yaml}
      self
    end

    def refresh(thorough=false)
      flag = false
      if thorough or self.empty?
        $log.info "Generating cache"
        flag = true
        @tunes.playlist.tracks.get.each do |t|
          id = t.persistent_ID.get
          self[id] = @tunes.loc(t)
        end
      else
        $log.info "Refreshing cache"
        # it's usually faster to query just the persistent IDs
        @tunes.playlist.tracks.persistent_ID.get.each do |id|
          unless self.has_key?(id)
            t = @tunes.playlist.tracks[its.persistent_ID.eq(id)].get
            self[id] = @tunes.loc(t)
            flag = true
          end
        end
      end
      write if flag
      self
    end

    # rudimentary dirty check. immsd will detect more subtle changes
    # (eventually)
    def dirty
      self.size != @tunes.playlist.count(:each => :track)
    end

  end

  # The music library
  attr :playlist
  # The playlist we manage, i.e. Party Shuffle
  attr :queue
  attr :cache

  # Is iTunes running?
  alias :running :is_running?
  
  def initialize
    @app = app('iTunes')
    super(@app)

    # XXX what happens if we never unset this?
    fixed_indexing.set true

    # some playlist whose special kind is Music
    @playlist = (@app.playlists['IMMS'] rescue 
                 @app.playlists[its.special_kind.eq(:Music)].first)
    $log.info "Using playlist '#{@playlist.name.get}'"

    # Party Shuffle
    @queue = @app.playlists[its.special_kind.eq(:Party_Shuffle)].first.get

    @cache = Cache.new(self)
  end

  def enqueue(track)
    duplicate track, :to => queue
  end

  # Get the index of this track in the playlist
  def index(track)
    t = playlist.tracks[its.persistent_ID.eq(track.persistent_ID.get)].first.get
    if t
      t.index.get
    else
      nil
    end
  end

  # How many tracks in the playlist?
  def track_count
    playlist.count(:each => :track)
  end

  # Wait for iTunes to be running
  def wait
    if not running
      $log.info "Waiting for iTunes..."
      sleep 1 until running
      $log.debug "Hello, iTunes."
    end
  end

  # The location (for file tracks) or persistent_ID (for everything else)
  def loc(track)
    (track.location.get rescue track.persistent_ID.get).to_s
  end
end

class IMMS
  def initialize
    $log.info 'Connecting to iTunes'
    @tunes = Tunes.new

    # Try to connect to the UNIX socket, and failing that start immsd and try
    # again.
    $log.info 'Connecting to immsd'
    begin
      @sock = UNIXSocket.open(HOME + '.imms' + 'socket')
    rescue
      @immsd_pid = fork do
        exec 'nice -n 5 immsd'
      end
      sleep 1
      retry
    end

    # add verbose/debug output on @sock.puts
    class << @sock
      def puts(str)
        $log.debug "> #{str.strip}" if $debug or not str =~ /^Playlist(Item)? /
        super
      end
      def gets
        str = super
        $log.debug "< #{str.strip}" if $debug or not str =~ /^GetPlaylistItem /
        str
      end
    end

    @mutex = Mutex.new

    @sock.puts 'Version'
    version = @sock.gets.strip
    unless version == 'Version 2.1'
      $log.warn "I'm not programmed for #{version}. Strange things may happen!" 
    end

    @sock.puts 'IMMS'
    @sock.puts 'Setup 0'
    playlist_changed
  end

  def playlist_changed
    @sock.puts "PlaylistChanged #{@tunes.track_count}"
  end

  # Dispatch incoming server commands
  def dispatch
    until @sock.eof do
      line = @sock.gets.strip
      
      @tunes.wait

      @mutex.synchronize {
        cmd = line.split.first
        case cmd
        when 'ResetSelection'
          $log.info "Resetting selection" if $verbose
          if @next
            @tunes.queue.delete @next
          end

        when 'TryAgain'
          @sock.puts 'SelectNext'

        when 'EnqueueNext'
          pos = line.split.last.to_i+1
          t = @tunes.playlist.tracks[pos]
          if t.enabled.get and t.shufflable.get
            @next = @tunes.enqueue(t).get
            $log.info "Next: '#{t.name.get}'" if $verbose
            @waiting_for_next = false
          else
            $log.debug "Rejecting '#{t.name.get}'" 
            @sock.puts 'SelectNext'
          end

        when 'PlaylistChanged'
          $log.warn 'immsd detected playlist change'
          @tunes.cache.refresh true
          playlist_changed

        when 'GetPlaylistItem'
          pos = line.split.last.to_i+1
          t = @tunes.playlist.tracks[pos]
          path = @tunes.loc(t)
          @sock.puts "PlaylistItem #{pos-1} #{path}"

        when 'GetEntirePlaylist'
          $log.info 'Sending entire playlist...'
          c = @tunes.cache.refresh
          @tunes.playlist.tracks.persistent_ID.get.each_with_index do |id,pos|
            @sock.puts "Playlist #{pos} #{c[id]}"
          end
          @sock.puts "PlaylistEnd"
          $log.info 'done.'

        else
          $log.error "Unknown Command '#{line}'"

        end
      }
    end
  end

  # Observe iTunes and send stuff to the server
  def control
    current_track = nil
    plays = 0
    fin = false
    # If we happen to play a song not in the library playlist, we'll not tell
    # IMMS about it. (off the record)
    otr = false
    jumping = false
    loop do
      @tunes.wait

      @mutex.synchronize {
        # avoid the race condition
        next unless @tunes.running

        # Observe listening behavior

        playing = (@tunes.player_state.get == :playing)

        if playing
          t = @tunes.current_track.get rescue next
          controlling = @tunes.current_playlist.get == @tunes.queue.get
          if not (@tunes.mute.get or idle)
            # advanced?
            if t != current_track
              if plays and current_track
                fin = (plays < current_track.played_count.get)
              end
              if current_track and not otr
                if $verbose
                  $log.info "#{fin ? "Finished" : "Skipped"} " + 
                    "#{jumping ? " (jumping)" : ""}"
                end
                @sock.puts "EndSong #{fin ? 1 : 0} " + 
                  "#{jumping ? 1 : 0} 0"
              end
              i = @tunes.index(t)
              otr = i.nil?
              @sock.puts "StartSong #{i-1} #{@tunes.loc(t)}" unless otr
              $log.info "Playing '#{t.name.get}'" if $verbose

              plays = t.played_count.get
              current_track = t
              @next == nil if t == @next

            else # same track we've been playing
              # are we jumping to the next track?
              # for now, we don't have the sophistication to detect jumps
              # unless we're controlling
              if controlling
                i = t.index.get + 1
                jumping = false
                if i <= @tunes.queue.count(:each => :track) and @next
                  # we're jumping if the next track isn't the one we queued up
                  jumping = (@tunes.queue.tracks[t.index.get + 1].get !=
                             @next)
                end
              end

            end
          end

          # Control playlist
          if controlling
            l = @tunes.queue.count(:each => :track)
            p = t.index.get
            if p == l and not @waiting_for_next
              @sock.puts "SelectNext"
              @waiting_for_next = true
            end
          end
        end
      }

      sleep PollInterval
    end
  end

  # close immsd connection so it gets SIGPIPE and goes away so we can restart
  def close
    @sock.close
    Process.kill "INT", @immsd_pid
    Process.wait @immsd_pid
  end

  def idle
    `ioreg -c IOHIDSystem | grep Idle | tail -n 1` =~ /"HIDIdleTime" = (\d+)/
    $1.to_i/1000000000 > IdleThreshold
  end
end

begin
  imms = IMMS.new
  dispatch = Thread.new do
    imms.dispatch
    raise "immsd connection lost"
  end
  imms.control
rescue
  $log.fatal $!
  $log.info "Restarting"
  dispatch.kill
  imms.close
  sleep 0.5
  retry
end

# This file is distributed under the Ruby License
# (http://www.ruby-lang.org/en/LICENSE.txt)
